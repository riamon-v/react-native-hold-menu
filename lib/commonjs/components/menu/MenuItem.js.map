{"version":3,"sources":["MenuItem.tsx"],"names":["ItemComponent","IS_IOS","TouchableOpacity","GHTouchableOpacity","AnimatedTouchable","Animated","createAnimatedComponent","MenuItemComponent","item","isLast","state","theme","menuProps","borderStyles","borderBottomColor","value","BORDER_DARK_COLOR","BORDER_LIGHT_COLOR","borderBottomWidth","textColor","color","isTitle","isDestructive","handleOnPress","params","actionParams","text","onPress","CONTEXT_MENU_STATE","END","styles","menuItem","menuItemTitleText","menuItemText","icon","withSeparator","MenuItem","React","memo","isEqual"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,aAAa,GAAGC,oBAASC,6BAAT,GAA4BC,2CAAlD;;AACA,MAAMC,iBAAiB,GAAGC,+BAASC,uBAAT,CAAiCN,aAAjC,CAA1B;;AAOA,MAAMO,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAA8C;AACtE,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA8B,yBAApC;AAEA,QAAMC,YAAY,GAAG,6CAAiB,MAAM;AAC1C,UAAMC,iBAAiB,GACrBH,KAAK,CAACI,KAAN,KAAgB,MAAhB,GAAyBC,6BAAzB,GAA6CC,8BAD/C;AAGA,WAAO;AACLH,MAAAA,iBADK;AAELI,MAAAA,iBAAiB,EAAET,MAAM,GAAG,CAAH,GAAO;AAF3B,KAAP;AAID,GARoB,EAQlB,CAACE,KAAD,EAAQF,MAAR,EAAgBD,IAAhB,CARkB,CAArB;AAUA,QAAMW,SAAS,GAAG,6CAAiB,MAAM;AACvC,WAAO;AAAEC,MAAAA,KAAK,EAAE,4BAASZ,IAAI,CAACa,OAAd,EAAuBb,IAAI,CAACc,aAA5B,EAA2CX,KAAK,CAACI,KAAjD;AAAT,KAAP;AACD,GAFiB,EAEf,CAACJ,KAAD,EAAQH,IAAR,CAFe,CAAlB;AAIA,QAAMe,aAAa,GAAG,wBAAY,MAAM;AACtC,QAAI,CAACf,IAAI,CAACa,OAAV,EAAmB;AACjB,YAAMG,MAAM,GAAGZ,SAAS,CAACG,KAAV,CAAgBU,YAAhB,CAA6BjB,IAAI,CAACkB,IAAlC,KAA2C,EAA1D;AACA,UAAIlB,IAAI,CAACmB,OAAT,EAAkBnB,IAAI,CAACmB,OAAL,CAAa,GAAGH,MAAhB;AAClBd,MAAAA,KAAK,CAACK,KAAN,GAAca,8BAAmBC,GAAjC;AACD,KALqC,CAMtC;;AACD,GAPqB,EAOnB,CAACnB,KAAD,EAAQF,IAAR,CAPmB,CAAtB;AASA,sBACE,yEACE,6BAAC,iBAAD;AACE,IAAA,OAAO,EAAEe,aADX;AAEE,IAAA,aAAa,EAAE,CAACf,IAAI,CAACa,OAAN,GAAgB,GAAhB,GAAsB,CAFvC;AAGE,IAAA,KAAK,EAAE,CAACS,gBAAOC,QAAR,EAAkBlB,YAAlB;AAHT,kBAKE,6BAAC,8BAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE,CACLL,IAAI,CAACa,OAAL,GAAeS,gBAAOE,iBAAtB,GAA0CF,gBAAOG,YAD5C,EAELd,SAFK;AADT,KAMGX,IAAI,CAACkB,IANR,CALF,EAaG,CAAClB,IAAI,CAACa,OAAN,IAAiBb,IAAI,CAAC0B,IAAtB,iBACC,6BAAC,sBAAD;AAAc,IAAA,IAAI,EAAE1B,IAAI,CAAC0B,IAAzB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAyC,IAAA,KAAK,EAAEf;AAAhD,IAdJ,CADF,EAkBGX,IAAI,CAAC2B,aAAL,iBAAsB,6BAAC,kBAAD,OAlBzB,CADF;AAsBD,CAhDD;;AAkDA,MAAMC,QAAQ,gBAAGC,eAAMC,IAAN,CAAW/B,iBAAX,EAA8BgC,eAA9B,CAAjB;;eACeH,Q","sourcesContent":["import React, { useCallback } from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport { TouchableOpacity as GHTouchableOpacity } from 'react-native-gesture-handler';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\n\nimport Separator from './Separator';\nimport styles from './styles';\n\nimport { MenuItemProps } from './types';\nimport { useInternal } from '../../hooks';\nimport { CONTEXT_MENU_STATE, IS_IOS } from '../../constants';\nimport { BORDER_LIGHT_COLOR, BORDER_DARK_COLOR } from './constants';\nimport isEqual from 'lodash.isequal';\nimport { getColor } from './calculations';\nimport { AnimatedIcon } from '../provider/Provider';\n\nconst ItemComponent = IS_IOS ? TouchableOpacity : GHTouchableOpacity;\nconst AnimatedTouchable = Animated.createAnimatedComponent(ItemComponent);\n\ntype MenuItemComponentProps = {\n  item: MenuItemProps;\n  isLast?: boolean;\n};\n\nconst MenuItemComponent = ({ item, isLast }: MenuItemComponentProps) => {\n  const { state, theme, menuProps } = useInternal();\n\n  const borderStyles = useAnimatedStyle(() => {\n    const borderBottomColor =\n      theme.value === 'dark' ? BORDER_DARK_COLOR : BORDER_LIGHT_COLOR;\n\n    return {\n      borderBottomColor,\n      borderBottomWidth: isLast ? 0 : 1,\n    };\n  }, [theme, isLast, item]);\n\n  const textColor = useAnimatedStyle(() => {\n    return { color: getColor(item.isTitle, item.isDestructive, theme.value) };\n  }, [theme, item]);\n\n  const handleOnPress = useCallback(() => {\n    if (!item.isTitle) {\n      const params = menuProps.value.actionParams[item.text] || [];\n      if (item.onPress) item.onPress(...params);\n      state.value = CONTEXT_MENU_STATE.END;\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [state, item]);\n\n  return (\n    <>\n      <AnimatedTouchable\n        onPress={handleOnPress}\n        activeOpacity={!item.isTitle ? 0.4 : 1}\n        style={[styles.menuItem, borderStyles]}\n      >\n        <Animated.Text\n          style={[\n            item.isTitle ? styles.menuItemTitleText : styles.menuItemText,\n            textColor,\n          ]}\n        >\n          {item.text}\n        </Animated.Text>\n        {!item.isTitle && item.icon && (\n          <AnimatedIcon name={item.icon} size={18} style={textColor} />\n        )}\n      </AnimatedTouchable>\n      {item.withSeparator && <Separator />}\n    </>\n  );\n};\n\nconst MenuItem = React.memo(MenuItemComponent, isEqual);\nexport default MenuItem;\n"]}